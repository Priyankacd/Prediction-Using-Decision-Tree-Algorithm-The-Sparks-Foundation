# -*- coding: utf-8 -*-
"""TASK6-Prediction Using Decision Tree Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TQ978wNWRlY9KdeAgni4rlBUYcWpoiPG

# GRIP @ The Sparks Foundation

# **Coder : PRIYANKA C. DHOLE ( Data Science & Business Analytics Intern )**

## Task 6 : Prediction Using Decision Tree Algorithm
## ( Level - Intermediate )
Problem Statement



*   Create the Decision Tree classifier and visualize it graphically.
*   The purpose is if we feed any new data to this classifier, it would be able to predict the right class accordingly.

## Import all the required libraries
"""

import sklearn.datasets as datasets
import pandas as pd

"""## Loading the dataset and print head of the dataset"""

dataSet=datasets.load_iris()
df=pd.DataFrame(dataSet.data, columns=dataSet.feature_names)
print(df.head(5))

"""## Check the shape of the data

"""

df.shape

"""## Check for Null values in given dataset"""

df.isna().sum()

"""## Check the information of the dataset"""

df.info()

"""## Overall description of dataset"""

df.describe()

"""## Check corelation between columns"""

df.corr()

"""## Print features and lables"""

X = df
Y = dataSet.target
print(Y)

"""## Split the dataset in training & testing dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

"""## Train the model on train dataset"""

from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier()
dtree.fit(X_train,y_train)

print('Model trained successfully!')

"""## Define prediction variable y_prediction"""

y_predict = dtree.predict(X_test)
y_predict

"""## Confusion Matrix"""

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_predict)

"""## Print the overall report of matix"""

from sklearn import metrics
print(metrics.classification_report(y_test,y_predict,digits=3))

"""## Visual Representation """

from sklearn import tree
import matplotlib.pyplot as plt

fn=['sepal length (cm)','sepal width (cm)','petal length (cm)','petal width (cm)']
cn=['setosa','versicolor','virginica']

fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize = (4,4), dpi = 300)

tree.plot_tree(dtree, feature_names = fn, class_names = cn, filled = True)

"""Conclusion:


*   I have successfully implemented the decision tree algorithm on given IRIS dataset.
*   Now, If we feed any new data to this classifier, it would be able to predict the right class accordingly.

Task 6 Completed Successfully

# **Thank You !**
"""